#!/bin/sh
#
# Athelas git pre-commit hook. This hook will, prior to committing:
# - Apply clang-format to staged .c/cpp/cc/cxx/h/hpp/hh/hxx files
# - Chekc for trailing whitespace
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi


# Find staged C/C++ files (that are added or modified) and format them
FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(c|cpp|cc|cxx|h|hpp|hh|hxx)$' || true)

if [ -z "$FILES" ]; then
    exit 0
fi

echo "[hook] Running clang-format on staged files..."

# Call formatting script
REPO_ROOT=$(git rev-parse --show-toplevel)
FORMAT_SCRIPT="$REPO_ROOT/scripts/bash/format.sh"

if [ ! -x "$FORMAT_SCRIPT" ]; then
    echo "[hook] ERROR: Format script not found or not executable: $FORMAT_SCRIPT"
    exit 1
fi

echo "[hook] Running formatting script..."
"$FORMAT_SCRIPT"
echo "[hook] Formatting complete."

# Check for whitespace errors; if any, abort the commit.
git diff-index --check --cached $against --
if [ $? -ne 0 ]; then
    echo "[hook] Whitespace errors found. Commit aborted."
    exit 1
fi

exit 0
